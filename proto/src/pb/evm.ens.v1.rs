// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub address_changed: ::prost::alloc::vec::Vec<AddressChanged>,
    #[prost(message, repeated, tag="2")]
    pub name_changed: ::prost::alloc::vec::Vec<NameChanged>,
    #[prost(message, repeated, tag="3")]
    pub name_registered: ::prost::alloc::vec::Vec<NameRegistered>,
    #[prost(message, repeated, tag="4")]
    pub name_renewed: ::prost::alloc::vec::Vec<NameRenewed>,
    #[prost(message, repeated, tag="5")]
    pub name_transferred: ::prost::alloc::vec::Vec<NameTransferred>,
    #[prost(message, repeated, tag="6")]
    pub new_owner: ::prost::alloc::vec::Vec<NewOwner>,
    #[prost(message, repeated, tag="7")]
    pub new_resolver: ::prost::alloc::vec::Vec<NewResolver>,
    #[prost(message, repeated, tag="8")]
    pub new_ttl: ::prost::alloc::vec::Vec<NewTtl>,
    #[prost(message, repeated, tag="9")]
    pub transfer: ::prost::alloc::vec::Vec<Transfer>,
    #[prost(message, repeated, tag="10")]
    pub reverse_claimed: ::prost::alloc::vec::Vec<ReverseClaimed>,
    #[prost(message, repeated, tag="11")]
    pub content_hash_changed: ::prost::alloc::vec::Vec<ContentHashChanged>,
    #[prost(message, repeated, tag="12")]
    pub text_changed: ::prost::alloc::vec::Vec<TextChanged>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewOwner {
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    #[prost(bytes="vec", tag="10")]
    pub node: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub label: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="12")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    #[prost(bytes="vec", tag="10")]
    pub node: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewResolver {
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    #[prost(bytes="vec", tag="10")]
    pub node: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub resolver: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewTtl {
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    #[prost(bytes="vec", tag="10")]
    pub node: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="11")]
    pub ttl: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NameRegistered {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", tag="2")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// -- log --
    ///
    /// log.ordinal
    #[prost(uint64, tag="3")]
    pub ordinal: u64,
    /// log.address
    #[prost(bytes="vec", tag="4")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="11")]
    pub expires: u64,
    /// -- event (v0 & v1) --
    #[prost(uint64, optional, tag="12")]
    pub base_cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag="13")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes="vec", optional, tag="14")]
    pub label: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", optional, tag="15")]
    pub node: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- event (v1) --
    #[prost(uint64, optional, tag="16")]
    pub premium: ::core::option::Option<u64>,
    /// -- event (base)
    #[prost(string, optional, tag="17")]
    pub token_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NameRenewed {
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    #[prost(string, tag="10")]
    pub name: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="11")]
    pub label: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="12")]
    pub cost: u64,
    #[prost(uint64, tag="13")]
    pub expires: u64,
    #[prost(bytes="vec", tag="14")]
    pub node: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NameTransferred {
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    #[prost(bytes="vec", tag="10")]
    pub name: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub label: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="12")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddressChanged {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", tag="2")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// -- log --
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub node: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    /// -- event (v1) --
    #[prost(uint64, optional, tag="12")]
    pub coin_type: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NameChanged {
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    #[prost(bytes="vec", tag="10")]
    pub node: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="11")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReverseClaimed {
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    #[prost(bytes="vec", tag="10")]
    pub node: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub address: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentHashChanged {
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    #[prost(bytes="vec", tag="10")]
    pub node: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextChanged {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", tag="2")]
    pub caller: ::prost::alloc::vec::Vec<u8>,
    /// -- log --
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub node: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="11")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub value: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="13")]
    pub indexed_key: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
