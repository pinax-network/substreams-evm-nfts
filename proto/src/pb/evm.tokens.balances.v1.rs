// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transfers: ::prost::alloc::vec::Vec<Transfer>,
    #[prost(message, repeated, tag="2")]
    pub balance_changes: ::prost::alloc::vec::Vec<BalanceChange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceChange {
    /// -- transaction --
    #[prost(bytes="vec", optional, tag="5")]
    pub transaction_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="8")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- ordering --
    ///
    /// storage_change.ordinal or balance_change.ordinal
    #[prost(uint64, optional, tag="10")]
    pub ordinal: ::core::option::Option<u64>,
    /// -- balance change --
    ///
    /// storage_change.address
    #[prost(bytes="vec", tag="20")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// keccak_address_map.get(storage_change.key)
    #[prost(bytes="vec", tag="21")]
    pub address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, optional, tag="22")]
    pub old_balance: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="23")]
    pub new_balance: ::prost::alloc::string::String,
    /// -- debug --
    #[prost(enumeration="Algorithm", tag="100")]
    pub algorithm: i32,
    /// trx.type
    #[prost(enumeration="super::super::super::super::sf::ethereum::r#type::v2::transaction_trace::Type", optional, tag="101")]
    pub trx_type: ::core::option::Option<i32>,
    /// call.call_type
    #[prost(enumeration="super::super::super::super::sf::ethereum::r#type::v2::CallType", optional, tag="102")]
    pub call_type: ::core::option::Option<i32>,
    /// balance_change.reason
    #[prost(enumeration="super::super::super::super::sf::ethereum::r#type::v2::balance_change::Reason", optional, tag="103")]
    pub reason: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    /// -- transaction --
    #[prost(bytes="vec", optional, tag="5")]
    pub transaction_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="8")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- ordinal --
    ///
    /// log.ordinal or call.begin_ordinal or trx.begin_ordinal
    #[prost(uint64, tag="10")]
    pub ordinal: u64,
    /// -- transfer --
    ///
    /// log.address
    #[prost(bytes="vec", tag="20")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="21")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="22")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="23")]
    pub value: ::prost::alloc::string::String,
    /// -- debug --
    #[prost(enumeration="Algorithm", tag="100")]
    pub algorithm: i32,
    /// trx.type
    #[prost(enumeration="super::super::super::super::sf::ethereum::r#type::v2::transaction_trace::Type", tag="101")]
    pub trx_type: i32,
    /// call.call_type
    #[prost(enumeration="super::super::super::super::sf::ethereum::r#type::v2::CallType", tag="102")]
    pub call_type: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Algorithm {
    Unspecified = 0,
    /// log event
    Log = 1,
    /// call
    Call = 2,
    /// child calls
    ChildCalls = 3,
    /// which the balances grow over time due to accrued interest
    RebasingToken = 4,
    /// RPC call
    Rpc = 5,
    /// RPC call missing
    RpcFail = 6,
    /// storage change does not match transfer value
    BalanceNotMatchTransfer = 7,
    /// block balance changes
    Block = 10,
    /// failed transaction
    Failed = 11,
    /// gas fee consumed
    Gas = 12,
    /// from transaction
    Transaction = 13,
    /// from transaction fee
    TransactionFee = 14,
    /// from transaction fee burned EIP-1559
    TransactionFeeBurn = 15,
    /// from transaction fee tip EIP-1559
    TransactionFeePriorityFee = 16,
    /// system contract
    System = 20,
    /// block reward paid to miner
    BlockReward = 21,
}
impl Algorithm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Algorithm::Unspecified => "ALGORITHM_UNSPECIFIED",
            Algorithm::Log => "ALGORITHM_LOG",
            Algorithm::Call => "ALGORITHM_CALL",
            Algorithm::ChildCalls => "ALGORITHM_CHILD_CALLS",
            Algorithm::RebasingToken => "ALGORITHM_REBASING_TOKEN",
            Algorithm::Rpc => "ALGORITHM_RPC",
            Algorithm::RpcFail => "ALGORITHM_RPC_FAIL",
            Algorithm::BalanceNotMatchTransfer => "ALGORITHM_BALANCE_NOT_MATCH_TRANSFER",
            Algorithm::Block => "ALGORITHM_BLOCK",
            Algorithm::Failed => "ALGORITHM_FAILED",
            Algorithm::Gas => "ALGORITHM_GAS",
            Algorithm::Transaction => "ALGORITHM_TRANSACTION",
            Algorithm::TransactionFee => "ALGORITHM_TRANSACTION_FEE",
            Algorithm::TransactionFeeBurn => "ALGORITHM_TRANSACTION_FEE_BURN",
            Algorithm::TransactionFeePriorityFee => "ALGORITHM_TRANSACTION_FEE_PRIORITY_FEE",
            Algorithm::System => "ALGORITHM_SYSTEM",
            Algorithm::BlockReward => "ALGORITHM_BLOCK_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALGORITHM_UNSPECIFIED" => Some(Self::Unspecified),
            "ALGORITHM_LOG" => Some(Self::Log),
            "ALGORITHM_CALL" => Some(Self::Call),
            "ALGORITHM_CHILD_CALLS" => Some(Self::ChildCalls),
            "ALGORITHM_REBASING_TOKEN" => Some(Self::RebasingToken),
            "ALGORITHM_RPC" => Some(Self::Rpc),
            "ALGORITHM_RPC_FAIL" => Some(Self::RpcFail),
            "ALGORITHM_BALANCE_NOT_MATCH_TRANSFER" => Some(Self::BalanceNotMatchTransfer),
            "ALGORITHM_BLOCK" => Some(Self::Block),
            "ALGORITHM_FAILED" => Some(Self::Failed),
            "ALGORITHM_GAS" => Some(Self::Gas),
            "ALGORITHM_TRANSACTION" => Some(Self::Transaction),
            "ALGORITHM_TRANSACTION_FEE" => Some(Self::TransactionFee),
            "ALGORITHM_TRANSACTION_FEE_BURN" => Some(Self::TransactionFeeBurn),
            "ALGORITHM_TRANSACTION_FEE_PRIORITY_FEE" => Some(Self::TransactionFeePriorityFee),
            "ALGORITHM_SYSTEM" => Some(Self::System),
            "ALGORITHM_BLOCK_REWARD" => Some(Self::BlockReward),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
